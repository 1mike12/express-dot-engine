{"name":"Express-dot-engine","tagline":"Node.js engine using the ultra fast doT templating with support for layouts, partials and friendly for front-end web libraries (Angular, Ember, Backbone...)","body":"express-dot-engine\r\n==================\r\n\r\nNode.js engine using the ultra fast [doT](http://olado.github.io/doT/) templating with support for layouts, partials and friendly for front-end web libraries (Angular, Ember, Backbone...)\r\n\r\nFeatures\r\n--------\r\n\r\n* Only 1 dependency (doT)\r\n* Extremely fast ([all the advantages of doT](http://olado.github.io/doT/))\r\n* Plays well with client libraries that use the curly {{ }} syntax (Angular, Ember, Backbone...)\r\n* Layout support, partial support\r\n* Cache support\r\n\r\nInstallation\r\n------------\r\n\r\nInstall with npm\r\n\r\n    > npm install express-dot-engine --save\r\n\r\nThen in your code\r\n\r\n    var engine = require('express-dot-engine');\r\n    var express = require('express');\r\n    var path = require('path');\r\n\r\n    var app = express();\r\n\r\n    app.engine('dot', engine.__express);\r\n    app.set('views', path.join(__dirname, './views'));\r\n    app.set('view engine', 'dot');\r\n\r\n    app.get('/', function(req, res){\r\n      res.render('index', { fromServer: 'Hello from server', });\r\n    });\r\n\r\n    var server = app.listen(3000, function() {\r\n      console.log('Listening on port %d', server.address().port);\r\n    });\r\n\r\nPlays well with Angular, Ember, Backbone, etc\r\n---------------------------------------------\r\n\r\nBy default, the engine uses [[ ]] instead of {{ }} on the backend. This allows the use of front-end templating libraries that already use {{ }}.\r\n\r\nIf you want to configure this you can change the library settings and doT settings.\r\n\r\n    engine.setting.layout = /\\[\\[###([\\s\\S]+?)\\]\\]/g;\r\n    engine.settings.dot = {\r\n      evaluate:    /\\[\\[([\\s\\S]+?)\\]\\]/g,\r\n      interpolate: /\\[\\[=([\\s\\S]+?)\\]\\]/g,\r\n      encode:      /\\[\\[!([\\s\\S]+?)\\]\\]/g,\r\n      use:         /\\[\\[#([\\s\\S]+?)\\]\\]/g,\r\n      define:      /\\[\\[##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\]\\]/g,\r\n      conditional: /\\[\\[\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\]\\]/g,\r\n      iterate:     /\\[\\[~\\s*(?:\\]\\]|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\]\\])/g,\r\n      varname: 'layout, server',\r\n      strip: false,\r\n      append: true,\r\n      selfcontained: false,\r\n    };\r\n\r\nLayout\r\n------\r\n\r\n### Supports multiple sections\r\n\r\n**master.dot**\r\n\r\n    <!doctype html>\r\n    <html lang=\"en\">\r\n      <head>\r\n        <title>Test page</title>\r\n      </head>\r\n      <body>\r\n        Hello from master.dot <br />\r\n\r\n        [[=layout.body]] <br />\r\n\r\n        [[=layout.body2]]\r\n\r\n      </body>\r\n    </html>\r\n\r\n**index.dot**\r\n\r\n    [[###master.dot]]\r\n\r\n    [[##body:\r\n      Hello from index.dot\r\n    #]]\r\n\r\n    [[##body2:\r\n      Hello from index.dot again\r\n    #]]\r\n\r\n### Supports cascading layouts\r\n\r\n**master.dot**\r\n\r\n    <!doctype html>\r\n    <html lang=\"en\">\r\n      <head>\r\n        <title>Test page</title>\r\n      </head>\r\n      <body>\r\n        Hello from master.dot <br />\r\n\r\n        [[=layout.body]]\r\n      </body>\r\n    </html>\r\n\r\n**wife.dot**\r\n\r\n    [[###master.dot]]\r\n\r\n    [[##body:\r\n      Hello from wife.dot\r\n\r\n      [[=layout.body]]\r\n    #]]\r\n\r\n**index.dot**\r\n\r\n    [[###wife.dot]]\r\n\r\n    [[##body:\r\n      Hello from index.dot\r\n    #]]\r\n\r\n### Supports Partials\r\n\r\nindex.dot\r\n\r\n    <div>\r\n      My partial says: [[#def.partial('partials/hello.dot')]]\r\n    </div>\r\n\r\npartials/hello.dot\r\n\r\n    <span>Hello from partials/hello.dot</span>\r\n\r\nServer model\r\n------------\r\n\r\nIn your application, you can render the view by calling\r\n\r\n**index.js**\r\n    app.get('/', function(req, res){\r\n      res.render('index', { fromServer: 'Hello from server', });\r\n    });\r\n\r\nOn the view, you can access the model by calling\r\n\r\n**index.dot**\r\n    Server says: [[=server.fromServer]]\r\n\r\nPartials and master layouts also has access to the server models.\r\n\r\nCaching\r\n-------\r\n\r\nCaching is enabled when express is running in production via the 'view cache' variable in express. This is done automatically. If you want to enable cache in development, you can add this\r\n    app.set('view cache', true);\r\n\r\nHow to run the examples\r\n-----------------------\r\n\r\nInstall express-dot-engine\r\n\r\n    > npm install express-dot-engine\r\n\r\nThen cd to the directory\r\n\r\n    > cd express-dot-engine\r\n\r\nInstall the example dependencies (yes install express-dot-engine within itself whoa!)\r\n\r\n    > npm install express\r\n    > npm install express-dot-engine\r\n\r\nThen run the example you want\r\n\r\n    > node examples/simple\r\n\r\nor\r\n\r\n    > node examples/cascade\r\n\r\nor\r\n\r\n    > node examples/partials\r\n","google":"UA-55029579-1","note":"Don't delete this file! It's used internally to help with page regeneration."}