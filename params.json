{"name":"Express-dot-engine","tagline":"Node.js engine using the ultra fast doT templating with support for layouts, partials and friendly for front-end web libraries (Angular, Ember, Backbone...)","body":"# express-dot-engine\r\n\r\n[![GitHub version](https://badge.fury.io/gh/danlevan%2Fexpress-dot-engine.svg)](http://badge.fury.io/gh/danlevan%2Fexpress-dot-engine) [![npm version](https://badge.fury.io/js/express-dot-engine.svg)](http://badge.fury.io/js/express-dot-engine) [![Build Status](https://travis-ci.org/danlevan/express-dot-engine.svg)](https://travis-ci.org/danlevan/express-dot-engine)\r\n\r\n> Node.js engine using the ultra fast [doT](http://olado.github.io/doT/) templating with support for layouts, partials. It's friendly for front-end web libraries (Angular, Ember, Backbone...)\r\n\r\n## Features\r\n\r\n* Extremely fast\r\n* All the advantage of ([doT](http://olado.github.io/doT/))\r\n* Layout and partial support\r\n* Uses `[[ ]]` by default, not clashing with `{{ }}` (Angular, Ember...)\r\n* Automatic caching in production\r\n\r\n## Installation\r\n\r\nInstall with npm\r\n\r\n```sh\r\n$ npm install express-dot-engine --save\r\n```\r\n\r\nThen set the engine in express\r\n\r\n```javascript\r\nvar engine = require('express-dot-engine');\r\n...\r\n\r\napp.engine('dot', engine.__express);\r\napp.set('views', path.join(__dirname, './views'));\r\napp.set('view engine', 'dot');\r\n```\r\n\r\n## Layout\r\n\r\nYou can specify the layout using [yaml](http://yaml.org/) and refer to the section as you would from a model (e.g. `[[= layout.whatever ]]`).\r\n\r\nYou can also define any extra configurations (like a page title) that are inherited to the master.\r\n\r\n### Multiple section support\r\n\r\n`master.dot`\r\n\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>[[= layout.title ]]</title>\r\n  </head>\r\n  <body>\r\n    Hello from master.dot <br />\r\n    [[= layout.section1 ]] <br />\r\n    [[= layout.section2 ]]\r\n  </body>\r\n</html>\r\n```\r\n\r\n`index.dot`\r\n```html\r\n---\r\nlayout: master.dot\r\ntitle: Index page\r\n---\r\n\r\n[[##section1:\r\n  Hello from index.dot\r\n#]]\r\n\r\n[[##section2:\r\n  Hello from index.dot again\r\n#]]\r\n```\r\n\r\n#### Result\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>Index page</title>\r\n  </head>\r\n  <body>\r\n    Hello from master.dot <br />\r\n    Hello from index.dot <br />\r\n    Hello from index.dot again\r\n  </body>\r\n</html>\r\n```\r\n\r\n### Cascading layout support\r\n\r\n`CEO.dot`\r\n\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>[[= layout.title ]]</title>\r\n  </head>\r\n  <body>\r\n    Hello from CEO.dot <br />\r\n    [[= layout.section ]]\r\n  </body>\r\n</html>\r\n```\r\n\r\n`Boss.dot`\r\n\r\n```html\r\n---\r\nlayout: ceo.dot\r\n---\r\n\r\n[[##section:\r\n  Hello from Boss.dot <br />\r\n  [[=layout.section]]\r\n#]]\r\n```\r\n\r\n`me.dot`\r\n\r\n```html\r\n---\r\nlayout: boss.dot\r\ntitle: Page title\r\n---\r\n\r\n[[##section:\r\n  Hello from me.dot\r\n#]]\r\n```\r\n\r\n#### Result\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>Boss page</title>\r\n  </head>\r\n  <body>\r\n    Hello from CEO.dot <br />\r\n    Hello from Boss.dot <br />\r\n    Hello from me.dot\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Partials\r\n\r\nYou can also use doT partials. The path is relative to the path of the current file.\r\n\r\n`index.dot`\r\n\r\n```html\r\n<div>\r\n  Message from partial: [[#def.partial('partials/hello.dot')]]\r\n</div>\r\n```\r\n\r\n`partials/hello.dot`\r\n\r\n```html\r\n<span>Hello from partial</span>\r\n```\r\n\r\n### Result\r\n\r\n```html\r\n<div>\r\n  My partial says: <span>Hello from partials/hello.dot</span>\r\n</div>\r\n```\r\n\r\n## Server model\r\n\r\nIn your node application, the model passed to the engine will be available through `[[= model. ]]` in your template.\r\n\r\n```javascript\r\napp.get('/', function(req, res){\r\n  res.render('index', { fromServer: 'Hello from server', });\r\n});\r\n```\r\n\r\n```html\r\n<div>\r\n  Server says: [[= model.fromServer ]]\r\n</div>\r\n```\r\n\r\n### Result\r\n\r\n```html\r\n<div>\r\n  Server says: Hello from server\r\n</div>\r\n```\r\n\r\n### Layouts and Partials also has access to the server models.\r\n\r\n## Settings\r\n\r\nBy default, the engine uses `[[ ]]` instead of `{{ }}` on the backend. This allows the use of front-end templating libraries that already use `{{ }}`.\r\n\r\nIf you want to configure this you can change the exposed [doT settings](http://olado.github.io/doT/).\r\n\r\n```javascript\r\n// doT settings\r\nengine.settings.dot = {\r\n  evaluate:    /\\[\\[([\\s\\S]+?)\\]\\]/g,\r\n  interpolate: /\\[\\[=([\\s\\S]+?)\\]\\]/g,\r\n  encode:      /\\[\\[!([\\s\\S]+?)\\]\\]/g,\r\n  use:         /\\[\\[#([\\s\\S]+?)\\]\\]/g,\r\n  define:      /\\[\\[##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\]\\]/g,\r\n  conditional: /\\[\\[\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\]\\]/g,\r\n  iterate:     /\\[\\[~\\s*(?:\\]\\]|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\]\\])/g,\r\n  varname: 'layout, model',\r\n  strip: false,\r\n  append: true,\r\n  selfcontained: false,\r\n};\r\n```\r\n\r\n## Caching\r\n\r\nCaching is enabled when express is running in production via the 'view cache' variable in express. This is done automatically. If you want to enable cache in development, you can add this\r\n\r\n```javascript\r\napp.set('view cache', true);\r\n```\r\n\r\n## How to run the examples\r\n\r\n### 1. Install express-dot-engine\r\n\r\n```sh\r\n$ npm install express-dot-engine\r\n```\r\n\r\n### 2. Install express\r\n\r\n```sh\r\n$ npm install express\r\n```\r\n\r\n### 3. Run the example\r\n\r\n```sh\r\n$ node node_module/express-dot-engine/examples\r\n```\r\n\r\nOpen your browser to `http://localhost:2015`\r\n\r\n## License\r\n[MIT](LICENSE)\r\n","google":"UA-55029579-1","note":"Don't delete this file! It's used internally to help with page regeneration."}